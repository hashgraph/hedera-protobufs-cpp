name: "ZXC: Build Library"
on:
  workflow_call:
    inputs:
      hapi-version-tag:
        type: string
        required: false
        default: "v0.30.0"

defaults:
  run:
    shell: bash

permissions:
  contents: read

jobs:
  hapi-version:
    name: Version Check
    runs-on: client-sdk-linux-medium
    outputs:
      tag: ${{ steps.version.outputs.tag }}
    steps:
      - name: Install Semantic Version Tools
        run: |
          echo "::group::Download SemVer Binary"
          sudo curl -L -o /usr/local/bin/semver https://raw.githubusercontent.com/fsaintjacques/semver-tool/master/src/semver
          echo "::endgroup::"
          echo "::group::Change SemVer Binary Permissions"
          sudo chmod -v +x /usr/local/bin/semver
          echo "::endgroup::"
          echo "::group::Show SemVer Binary Version Info"
          semver --version
          echo "::endgroup::"

      - name: Validate HAPI Version Tag
        id: version
        run: |
          HAPI_VERSION="${{ inputs.hapi-version-tag }}"
          VALID_VERSION="$(semver validate "${HAPI_VERSION}")"

          if [[ "${VALID_VERSION}" != "valid" ]]; then
            echo "::error title=Version Error::The supplied hapi-version-tag parameter (${HAPI_VERSION}) is invalid and does not conform to the semantic versioning specifications."
            exit 2
          fi

          [[ "${HAPI_VERSION}" == v* ]] || HAPI_VERSION="v${HAPI_VERSION}"
          echo "number=${HAPI_VERSION}" >> "${GITHUB_OUTPUT}"

  build:
    name: Build
    runs-on: client-sdk-${{ matrix.os }}-large
    strategy:
      matrix:
        include:
          - os: linux
            preset: linux-x64
    #          - os: macos-latest
    #            preset: macos-x64
    #          - os: windows-latest
    #            preset: windows-x64
    needs:
      - hapi-version
    steps:
      - name: Checkout Code
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
        with:
          submodules: true

      - name: Install Linux Prerequisites
        if: ${{ runner.os == 'Linux' }}
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config linux-headers-5.15.0-79-generic build-essential

      - name: Ensure Binary Cache Path Exists
        run: mkdir -p "${{ github.workspace }}/b/vcpkg_cache"

      - name: CMake Android Build
        if: github.event.pull_request.merged == true
        run: |
          docker build -t ubuntu-jammy-hedera-protobufs-cpp-android-build . --build-arg BRANCH_NAME=${{ github.base_ref }}
          docker cp $(docker create ubuntu-jammy-hedera-protobufs-cpp-android-build:latest):/hedera-protobufs-cpp/package .

      - name: Install CMake & Ninja
        uses: lukka/get-cmake@a70f1cfa1857a3eecfe0d34962269e1b1e8be56c # v3.30.2

      - name: Setup VCPkg
        uses: lukka/run-vcpkg@5e0cab206a5ea620130caf672fce3e4a6b5666a1 # v11.5
        with:
          binaryCachePath: ${{ github.workspace }}/b/vcpkg_cache

      - name: Convert VCPkg to Full Clone
        run: |
          cd vcpkg
          git fetch --unshallow --prune

      - name: CMake Build (Debug)
        uses: lukka/run-cmake@af1be47fd7c933593f687731bc6fdbee024d3ff4 # v10.8
        with:
          configurePreset: ${{ matrix.preset }}-debug
          buildPreset: ${{ matrix.preset }}-debug

      - name: CMake Build (Release)
        if: github.event.pull_request.merged == true
        uses: lukka/run-cmake@af1be47fd7c933593f687731bc6fdbee024d3ff4 # v10.8
        with:
          configurePreset: ${{ matrix.preset }}-release
          buildPreset: ${{ matrix.preset }}-release

      - name: Compute Short SHA
        id: sha
        run: echo "short=$(echo -n "${{ github.sha }}" | cut -c1-8)" >> "${GITHUB_OUTPUT}"

      - name: Attach Artifact
        if: github.event.pull_request.merged == true
        uses: actions/upload-artifact@834a144ee995460fba8ed112a2fc961b36a5ec5a # v4.3.6
        with:
          name: hapi-library-${{ runner.os }}-${{ steps.sha.outputs.short }}
          path: package/
          if-no-files-found: warn
